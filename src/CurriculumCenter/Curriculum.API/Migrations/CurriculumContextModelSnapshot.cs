// <auto-generated />
using System;
using Curriculum.Domain;
using Curriculum.Infrastruction;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Curriculum.API.Migrations
{
    [DbContext(typeof(CurriculumContext))]
    partial class CurriculumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Curriculum.Domain.ClassHour", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ClassHourTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClassHourType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DATETIME")
                        .HasComputedColumnSql("GETDATE()");

                    b.Property<bool>("IsExperience")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFree")
                        .HasDefaultValue(true);

                    b.Property<string>("SectionID");

                    b.Property<string>("VedioDuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(8)")
                        .HasDefaultValue("00:00:00");

                    b.Property<string>("VedioUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.ToTable("ClassHours");
                });

            modelBuilder.Entity("Curriculum.Domain.Comment", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<int>("CommentStar");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("Datetime")
                        .HasComputedColumnSql("Getdate()");

                    b.Property<string>("CurriculumID")
                        .IsRequired();

                    b.Property<string>("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("CurriculumID");

                    b.HasIndex("StudentID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Curriculum.Domain.Courseware", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<string>("CurriculumID")
                        .IsRequired();

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("ID");

                    b.HasIndex("CurriculumID");

                    b.ToTable("Coursewares");
                });

            modelBuilder.Entity("Curriculum.Domain.Curriculum", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Datetime")
                        .HasDefaultValueSql("Getdate()");

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Datetime")
                        .HasDefaultValueSql("2999-1-1");

                    b.Property<string>("Introduce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(500)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsFree")
                        .HasDefaultValue(true);

                    b.Property<string>("PictureURL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(100)")
                        .HasDefaultValue("");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.HasKey("ID");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("Curriculum.Domain.CurriculumStudent", b =>
                {
                    b.Property<string>("CurriculumID");

                    b.Property<string>("StudentID");

                    b.HasKey("CurriculumID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("CurriculumStudents");
                });

            modelBuilder.Entity("Curriculum.Domain.Section", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(36)");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Datetime")
                        .HasDefaultValueSql("Getdate()");

                    b.Property<string>("CurriculumID")
                        .IsRequired();

                    b.Property<string>("SectionIntroduce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NVARCHAR(1000)")
                        .HasDefaultValue("SectionIntroduce");

                    b.Property<string>("SectionTitle")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.HasKey("ID");

                    b.HasIndex("CurriculumID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Curriculum.Domain.Student", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("Nvarchar(36)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(50)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Curriculum.Domain.ClassHour", b =>
                {
                    b.HasOne("Curriculum.Domain.Section", "section")
                        .WithMany("ClassHours")
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("Curriculum.Domain.Comment", b =>
                {
                    b.HasOne("Curriculum.Domain.Curriculum", "Curriculum")
                        .WithMany("Comments")
                        .HasForeignKey("CurriculumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Curriculum.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("Curriculum.Domain.Courseware", b =>
                {
                    b.HasOne("Curriculum.Domain.Curriculum", "Curriculum")
                        .WithMany("Coursewares")
                        .HasForeignKey("CurriculumID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Curriculum.Domain.Curriculum", b =>
                {
                    b.OwnsOne("Curriculum.Domain.Teacher", "Lecturer", b1 =>
                        {
                            b1.Property<string>("CurriculumID");

                            b1.Property<string>("Introduce")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("Nvarchar(500)")
                                .HasDefaultValue("");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("Nvarchar(50)");

                            b1.Property<string>("Picture")
                                .IsRequired()
                                .HasColumnType("Nvarchar(100)");

                            b1.Property<string>("TeacherID")
                                .IsRequired()
                                .HasColumnType("Nvarchar(36)");

                            b1.HasIndex("TeacherID");

                            b1.ToTable("Curriculums");

                            b1.HasOne("Curriculum.Domain.Curriculum")
                                .WithOne("Lecturer")
                                .HasForeignKey("Curriculum.Domain.Teacher", "CurriculumID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Curriculum.Domain.CurriculumStudent", b =>
                {
                    b.HasOne("Curriculum.Domain.Curriculum", "Curriculum")
                        .WithMany("LearningStudents")
                        .HasForeignKey("CurriculumID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Curriculum.Domain.Student", "Student")
                        .WithMany("Curriculums")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Curriculum.Domain.Section", b =>
                {
                    b.HasOne("Curriculum.Domain.Curriculum", "Curriculum")
                        .WithMany("sections")
                        .HasForeignKey("CurriculumID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
